ifndef BUILD_TARGET
CROSS    = arm-none-eabi-

LINKFILE = $(SDIR)/target/tx/$(FAMILY)/$(TARGET)/$(TARGET).ld
LIBOPENCM3 = $(SDIR)/libopencm3/lib/libopencm3_stm32f1.a

ifeq "$(HAS_4IN1_FLASH)" "1"
NUM_MODELS ?= 30
else
NUM_MODELS ?= 10
endif

SRC_C   := $(wildcard $(SDIR)/target/tx/$(FAMILY)/common/*.c) \
           $(wildcard $(SDIR)/target/tx/$(FAMILY)/$(TARGET)/*.c) \
           $(wildcard $(SDIR)/target/drivers/mcu/stm32/*.c) \
           $(wildcard $(SDIR)/target/drivers/filesystems/*.c) \
           $(wildcard $(SDIR)/target/drivers/filesystems/devofs/*.c) \
           $(wildcard $(SDIR)/target/drivers/filesystems/petit_fat/*.c) \
           $(wildcard $(SDIR)/target/tx/devo/common/msc2/*.c) \
           $(wildcard $(SDIR)/target/tx/devo/common/msc2/lib/*.c) \
           $(wildcard $(SDIR)/target/tx/devo/common/hid/*.c) \
           $(wildcard $(SDIR)/target/tx/devo/common/protocol/*.c) \
           $(wildcard $(SDIR)/target/tx/devo/common/uart.c) \
           $(SDIR)/target/drivers/backlight/backlight.c


ifneq "$(HAS_4IN1_FLASH)" "1"
SRC_C := $(filter-out $(SDIR)/target/drivers/mcu/stm32/spi_flash.c, $(SRC_C))
endif

CFLAGS   = -D"assert_param(x)=" -DSTM32F10X_HD -DSTM32F1 -mcpu=cortex-m3 -mthumb -mfix-cortex-m3-ldrd -fdata-sections -ffunction-sections -I$(SDIR)/target/tx/devo/common/msc2/lib -I$(SDIR)/target/tx/devo/common/msc2 -I$(SDIR)/libopencm3/include -I$(SDIR)/target/drivers/filesystems -I$(SDIR)/target/tx/radiolink/common  -fno-builtin-printf -Os --specs=nano.specs

ifeq "$(HAS_4IN1_FLASH)" "1"
CFLAGS  += -D"HAS_4IN1_FLASH=1"
endif
ifeq "$(HAS_FLASH_DETECT)" "1"
CFLAGS  += -D"HAS_FLASH_DETECT=1"
endif
MODULE_FLAGS = -fno-builtin

LFLAGS   = -nostartfiles -Wl,-gc-sections -Wl,-Map=$(TARGET).map,--cref -lc -lnosys -L$(SDIR) -Lobjs/$(TARGET)
LFLAGS2  = -Wl,-T$(LINKFILE)

else #BUILD_TARGET

$(LIBOPENCM3):
	test -s $(SDIR)/libopencm3/Makefile || { echo "Fetch libopencm3 via 'git submodule update --init'"; exit 1; }
	+$(MAKE) -C $(SDIR)/libopencm3 TARGETS=stm32/f1 lib

$(ODIR)/devo.fs: $(LAST_MODEL) $(PRE_FS) $(TARGET).fs_wrapper
	target/drivers/filesystems/devofs/buildfs.py -c -i -f $@ -d filesystem/$(FILESYSTEM)

endif #BUILD_TARGET
