/***************************************************************
 telemetry processing that's common for Frsky and FrskyX
***************************************************************/

static u32 discharge_time;
static u32 discharge_dAms;   // deciAmp-milliseconds
static u8 last_cell;


static void set_telemetry(frsky_telem_t offset, s32 value) {
    Telemetry.value[offset] = value;
    TELEMETRY_SetUpdated(offset);
}

// store "before punctuation" and "after punctuation" values locally
// keeps Telemetry.gps compatible with devo and dsm
static struct s_fr_gps {
    s16 latitude_bp;
    s16 latitude_ap;
    s16 longitude_bp;
    s16 longitude_ap;
    s16 altitude_bp;
    s16 velocity_bp;
    u16 day_month;             // 0x15
    u16 year;                  // 0x16
    u16 hour_min;              // 0x17
    u16 second;                // 0x18
//    u16 heading;
//    u8 satcount;
} fr_gps;


#define VFAS_D_HIPREC_OFFSET      2000


// helper functions
static void update_cell(u8 cell, s32 value) {
    if (cell < 6) {
        Telemetry.value[TELEM_FRSKY_ALL_CELL] += value - Telemetry.value[TELEM_FRSKY_CELL1 + cell];
        TELEMETRY_SetUpdated(TELEM_FRSKY_ALL_CELL);    // battery total

        set_telemetry(TELEM_FRSKY_CELL1 + cell, value);
    }
}

#define MIN(a,b) ((a) < (b) ? a : b)
static void update_min_cell(u8 num_cells) {
    Telemetry.value[TELEM_FRSKY_MIN_CELL] = Telemetry.value[TELEM_FRSKY_CELL1];
    for (int i=1; i < MIN(num_cells, 6); i++) {
        if (Telemetry.value[TELEM_FRSKY_CELL1 + i] < Telemetry.value[TELEM_FRSKY_MIN_CELL]) {
            Telemetry.value[TELEM_FRSKY_MIN_CELL] = Telemetry.value[TELEM_FRSKY_CELL1 + i];
            TELEMETRY_SetUpdated(TELEM_FRSKY_MIN_CELL);
        }
    }
}

static void frsky_telem_reset() {
    Model.ground_level = 0;
    discharge_dAms = 0;
    update_min_cell(last_cell+1);
}

static void processHubPacket(u8 id, u16 value) {
    static u8 varioHighPrecision = 0;
    static u8 last_id;
    static u16 last_value;

    switch (id) {
    //defined in protocol_sensor_hub.pdf
    case 0x01: //GPS_ALT (whole number & sign) -500m-9000m (.01m/count)
        fr_gps.altitude_bp = value;
        break;
    case 0x09: //GPS_ALT (fraction)  TODO opentx throws away the ap value and only uses bp
        Telemetry.gps.altitude = (fr_gps.altitude_bp * 100 + value) * 10;
        TELEMETRY_SetUpdated(TELEM_GPS_ALT);
        break;
    case 0x02: //TEMP1 -30C-250C (1C/ count)
        set_telemetry(TELEM_FRSKY_TEMP1, (s16)value);
        break;
    case 0x03: //RPM   0-60000
        Telemetry.value[TELEM_FRSKY_RPM] = value;
        TELEMETRY_SetUpdated(TELEM_FRSKY_RPM);
        break;
    case 0x04: //Fuel  0, 25, 50, 75, 100
        Telemetry.value[TELEM_FRSKY_FUEL] = value;
        TELEMETRY_SetUpdated(TELEM_FRSKY_FUEL);
        break;
    case 0x05: //TEMP2 -30C-250C (1C/ count)
        set_telemetry(TELEM_FRSKY_TEMP2, (s16)value);
        break;
    case 0x06: { //Battery voltages - CELL# and VOLT
        u8 cell = (value >> 4) & 0x0f;
        value = (((value & 0x0F) << 8) + (value >> 8)) / 5;

        update_cell(cell, value);

        if (cell < 6 && cell > last_cell) last_cell = cell;
        update_min_cell(last_cell+1);

        break;
        }
    case 0x10: //ALT (whole number & sign) -500m-9000m (.01m/count)
        last_id = id;
        last_value = value;
        break;
    case 0x21: //ALT (fraction)  (.01m/count)
        if (last_id != 0x10) return;
        if (value > 9 || varioHighPrecision) {
            varioHighPrecision = 1;
        } else {
            value /= 100;    // map low precision vario into high precision. Altitude is stored in cm to match X-series telemetry
        }
        s32 altitude = (s16)last_value * 100 + (((s16)last_value < 0) ? -value : value);

        if (Model.ground_level == 0) Model.ground_level = altitude;
        set_telemetry(TELEM_FRSKY_ALTITUDE, altitude - Model.ground_level);
        break;
    case 0x11: //GPS Speed (whole number and sign) in Knots
        fr_gps.velocity_bp = value;
        break;
    case 0x19: //GPS Speed (fraction)
        // Convert 1/100 knot to mm/sec
        Telemetry.gps.velocity = (fr_gps.velocity_bp * 100 + value) * 5556 / 1080;
        TELEMETRY_SetUpdated(TELEM_GPS_SPEED);
        break;
    case 0x12: //GPS Longitude (whole number) dddmm.mmmm
        fr_gps.longitude_bp = value;
        break;
    case 0x1A: //GPS Longitude (fraction)
        fr_gps.longitude_ap = value;
        break;
    case 0x22: { //GPS Longitude E/W
        s32 deg = fr_gps.longitude_bp / 100;
        s32 min = fr_gps.longitude_bp % 100;
        Telemetry.gps.longitude = (deg * 60 + min) * 60 * 1000 + fr_gps.longitude_ap * 6;
        if (value == 'W')
            Telemetry.gps.longitude = -Telemetry.gps.longitude;
        TELEMETRY_SetUpdated(TELEM_GPS_LONG);
        break;}
    case 0x13: //GPS Latitude (whole number) ddmm.mmmm
        fr_gps.latitude_bp = value;
        break;
    case 0x1B: //GPS Latitude (fraction)
        fr_gps.latitude_ap = value;
        break;
    case 0x23: { //GPS Latitude N/S
        s32 deg = fr_gps.latitude_bp / 100;
        s32 min = fr_gps.latitude_bp % 100;
        Telemetry.gps.latitude = (deg * 60 + min) * 60 * 1000 + fr_gps.latitude_ap * 6;
        if (value == 'S')
            Telemetry.gps.latitude = -Telemetry.gps.latitude;
        TELEMETRY_SetUpdated(TELEM_GPS_LAT);
        break;}
    //case 0x14: //GPS Compass (whole number) (0-259.99) (.01degree/count)
    //case 0x1C: //GPS Compass (fraction)
    case 0x15: //GPS Date/Month
        fr_gps.day_month = value;
        break;
    case 0x16: //GPS Year
        fr_gps.year = value;
        break;
    case 0x17: //GPS Hour/Minute
        fr_gps.hour_min = value;
        break;
    case 0x18: //GPS Second
        fr_gps.second = value;
        Telemetry.gps.time = ( (u32)fr_gps.year & 0x3f)            << 26
                           | (((u32)fr_gps.day_month >> 8) & 0x0f) << 22
                           | ( (u32)fr_gps.day_month & 0x1f)       << 17
                           | ( (u32)fr_gps.hour_min & 0x1f)        << 12
                           | (((u32)fr_gps.hour_min >> 8) & 0x3f)  << 6
                           | ( (u32)fr_gps.second & 0x3f);
        TELEMETRY_SetUpdated(TELEM_GPS_TIME);
        break;
    //case 0x24: //Accel X
    //case 0x25: //Accel Y
    //case 0x26: //Accel Z
    case 0x28: //Current 0A-100A (0.1A/count)
        set_telemetry(TELEM_FRSKY_CURRENT, value);
        if (discharge_time == 0) discharge_time = CLOCK_getms();
        discharge_dAms += (u32)value * (CLOCK_getms() - discharge_time);
        discharge_time = CLOCK_getms();
        set_telemetry(TELEM_FRSKY_DISCHARGE, discharge_dAms / 36000);
        break;

    case 0x30: //VARIO
        set_telemetry(TELEM_FRSKY_VARIO, (s16)value);
				break;

    case 0x39: //VFAS_ID
        if (value >= VFAS_D_HIPREC_OFFSET) {
            // incoming value has a resolution of 0.01V and added offset of VFAS_D_HIPREC_OFFSET
            value -= VFAS_D_HIPREC_OFFSET;
        } else {
            // incoming value has a resolution of 0.1V
            value *= 10;
        }
        set_telemetry(TELEM_FRSKY_VOLT3, value);
				break;

    case 0x3A: //Ampere sensor voltage (whole number) (measured as V) 0V-48V (0.5V/count)
        last_id = id;
        last_value = value;
        break;
    case 0x3B: //Ampere sensor voltage (fractional)
        if (last_id != 0x3A) return;
        set_telemetry(TELEM_FRSKY_VOLTA, ((last_value * 100 + value * 10) * 210) / 110);
        break;
    }
}
